// Code generated by protoc-gen-go. DO NOT EDIT.
// source: matrix_channel.proto

/*
Package matrix_channel_pb is a generated protocol buffer package.

It is generated from these files:
	matrix_channel.proto

It has these top-level messages:
	TapdUserReply
	NotionUserChange
	TapdUserWorkspaceReply
	TapdUserWorkspaceDetail
	TapdWorkspace
	TapdTaskReply
	TapdTaskDetail
	TapdTask
	TapdStoryStatusMapReply
	TapdStoryStatusMapEmptyReply
	TapdStoryReply
	TapdStoryDetail
	TapdStory
	TapdIterationReply
	TapdIterationDetail
	TapdIteration
	NotionTaskChange
	NotionStoryChange
	NotionDataBaseQueryRequest
	NotionDataBaseQuerySort
	NotionDataBaseQueryReply
	NotionPage
	NotionProperty
	NotionTypeDate
	NotionTypeMultiSelect
	NotionTypeSelect
	NotionTypeTitle
	NotionTypeTextInternal
	NotionTypeUser
	NotionTypeUserPerson
	NotionTypeRichText
	TapdUserInfo
	TapdUser
	NotionPageCreateRequest
	NotionPageUpdateRequest
	NotionPageParent
	NotionPageProperty
	NotionRequestErrReply
	NotionExchangeTokenRequest
	NotionExchangeTokenReply
	NotionExchangeOwner
	NotionExchangeErrReply
	WxNotify
	WxNotifyTypeMarkdown
*/
package matrix_channel_pb

import (
	fmt "fmt"

	proto "github.com/golang/protobuf/proto"

	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 请求 Tapd 查询用户数据的响应
type TapdUserReply struct {
	// 状态
	Status int32 `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	// 数据
	Data []*TapdUserInfo `protobuf:"bytes,2,rep,name=data" json:"data,omitempty"`
	// 响应信息
	Info string `protobuf:"bytes,3,opt,name=info" json:"info,omitempty"`
}

func (m *TapdUserReply) Reset()                    { *m = TapdUserReply{} }
func (m *TapdUserReply) String() string            { return proto.CompactTextString(m) }
func (*TapdUserReply) ProtoMessage()               {}
func (*TapdUserReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TapdUserReply) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *TapdUserReply) GetData() []*TapdUserInfo {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *TapdUserReply) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

// Notion 变更数据
type NotionUserChange struct {
	NickName string `protobuf:"bytes,1,opt,name=nickName" json:"nickName,omitempty"`
	RealName string `protobuf:"bytes,2,opt,name=realName" json:"realName,omitempty"`
	PageID   string `protobuf:"bytes,3,opt,name=pageID" json:"pageID,omitempty"`
}

func (m *NotionUserChange) Reset()                    { *m = NotionUserChange{} }
func (m *NotionUserChange) String() string            { return proto.CompactTextString(m) }
func (*NotionUserChange) ProtoMessage()               {}
func (*NotionUserChange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *NotionUserChange) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *NotionUserChange) GetRealName() string {
	if m != nil {
		return m.RealName
	}
	return ""
}

func (m *NotionUserChange) GetPageID() string {
	if m != nil {
		return m.PageID
	}
	return ""
}

// 请求 Tapd 查询用户参与的项目列表
type TapdUserWorkspaceReply struct {
	// 状态
	Status int32 `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	// 数据
	Data []*TapdUserWorkspaceDetail `protobuf:"bytes,2,rep,name=data" json:"data,omitempty"`
	// 响应信息
	Info string `protobuf:"bytes,3,opt,name=info" json:"info,omitempty"`
}

func (m *TapdUserWorkspaceReply) Reset()                    { *m = TapdUserWorkspaceReply{} }
func (m *TapdUserWorkspaceReply) String() string            { return proto.CompactTextString(m) }
func (*TapdUserWorkspaceReply) ProtoMessage()               {}
func (*TapdUserWorkspaceReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TapdUserWorkspaceReply) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *TapdUserWorkspaceReply) GetData() []*TapdUserWorkspaceDetail {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *TapdUserWorkspaceReply) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

type TapdUserWorkspaceDetail struct {
	Workspace *TapdWorkspace `protobuf:"bytes,1,opt,name=Workspace" json:"Workspace,omitempty"`
}

func (m *TapdUserWorkspaceDetail) Reset()                    { *m = TapdUserWorkspaceDetail{} }
func (m *TapdUserWorkspaceDetail) String() string            { return proto.CompactTextString(m) }
func (*TapdUserWorkspaceDetail) ProtoMessage()               {}
func (*TapdUserWorkspaceDetail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TapdUserWorkspaceDetail) GetWorkspace() *TapdWorkspace {
	if m != nil {
		return m.Workspace
	}
	return nil
}

type TapdWorkspace struct {
	// 项目ID
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// 项目名称
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *TapdWorkspace) Reset()                    { *m = TapdWorkspace{} }
func (m *TapdWorkspace) String() string            { return proto.CompactTextString(m) }
func (*TapdWorkspace) ProtoMessage()               {}
func (*TapdWorkspace) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *TapdWorkspace) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TapdWorkspace) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// 请求 Tapd 查询任务数据的响应
type TapdTaskReply struct {
	// 状态
	Status int32 `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	// 数据
	Data []*TapdTaskDetail `protobuf:"bytes,2,rep,name=data" json:"data,omitempty"`
	// 响应信息
	Info string `protobuf:"bytes,3,opt,name=info" json:"info,omitempty"`
}

func (m *TapdTaskReply) Reset()                    { *m = TapdTaskReply{} }
func (m *TapdTaskReply) String() string            { return proto.CompactTextString(m) }
func (*TapdTaskReply) ProtoMessage()               {}
func (*TapdTaskReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *TapdTaskReply) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *TapdTaskReply) GetData() []*TapdTaskDetail {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *TapdTaskReply) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

type TapdTaskDetail struct {
	Task *TapdTask `protobuf:"bytes,1,opt,name=Task" json:"Task,omitempty"`
}

func (m *TapdTaskDetail) Reset()                    { *m = TapdTaskDetail{} }
func (m *TapdTaskDetail) String() string            { return proto.CompactTextString(m) }
func (*TapdTaskDetail) ProtoMessage()               {}
func (*TapdTaskDetail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *TapdTaskDetail) GetTask() *TapdTask {
	if m != nil {
		return m.Task
	}
	return nil
}

type TapdTask struct {
	// tapdTaskID
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// 任务名称
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// 任务描述
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// 项目ID
	WorkspaceId string `protobuf:"bytes,4,opt,name=workspace_id,json=workspaceId" json:"workspace_id,omitempty"`
	// 创建人
	Creator string `protobuf:"bytes,5,opt,name=creator" json:"creator,omitempty"`
	// 创建时间
	Created string `protobuf:"bytes,6,opt,name=created" json:"created,omitempty"`
	// 最后修改时间
	Modified string `protobuf:"bytes,7,opt,name=modified" json:"modified,omitempty"`
	// 任务状态
	Status string `protobuf:"bytes,8,opt,name=status" json:"status,omitempty"`
	// / 处理人
	Owner string `protobuf:"bytes,9,opt,name=owner" json:"owner,omitempty"`
	// 抄送人
	Cc string `protobuf:"bytes,10,opt,name=cc" json:"cc,omitempty"`
	// 需求 ID
	StoryId string `protobuf:"bytes,11,opt,name=story_id,json=storyId" json:"story_id,omitempty"`
	// 迭代 ID
	IterationId string `protobuf:"bytes,12,opt,name=iteration_id,json=iterationId" json:"iteration_id,omitempty"`
	// 优先级
	Priority string `protobuf:"bytes,13,opt,name=priority" json:"priority,omitempty"`
	// 完成时间
	Completed string `protobuf:"bytes,14,opt,name=completed" json:"completed,omitempty"`
	// 工时
	Effort string `protobuf:"bytes,15,opt,name=effort" json:"effort,omitempty"`
}

func (m *TapdTask) Reset()                    { *m = TapdTask{} }
func (m *TapdTask) String() string            { return proto.CompactTextString(m) }
func (*TapdTask) ProtoMessage()               {}
func (*TapdTask) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *TapdTask) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TapdTask) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TapdTask) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *TapdTask) GetWorkspaceId() string {
	if m != nil {
		return m.WorkspaceId
	}
	return ""
}

func (m *TapdTask) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *TapdTask) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *TapdTask) GetModified() string {
	if m != nil {
		return m.Modified
	}
	return ""
}

func (m *TapdTask) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *TapdTask) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *TapdTask) GetCc() string {
	if m != nil {
		return m.Cc
	}
	return ""
}

func (m *TapdTask) GetStoryId() string {
	if m != nil {
		return m.StoryId
	}
	return ""
}

func (m *TapdTask) GetIterationId() string {
	if m != nil {
		return m.IterationId
	}
	return ""
}

func (m *TapdTask) GetPriority() string {
	if m != nil {
		return m.Priority
	}
	return ""
}

func (m *TapdTask) GetCompleted() string {
	if m != nil {
		return m.Completed
	}
	return ""
}

func (m *TapdTask) GetEffort() string {
	if m != nil {
		return m.Effort
	}
	return ""
}

// 请求 Tapd 查询需求状态映射的响应
type TapdStoryStatusMapReply struct {
	// 状态
	Status int32 `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	// 数据
	Data map[string]string `protobuf:"bytes,2,rep,name=data" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// 响应信息
	Info string `protobuf:"bytes,3,opt,name=info" json:"info,omitempty"`
}

func (m *TapdStoryStatusMapReply) Reset()                    { *m = TapdStoryStatusMapReply{} }
func (m *TapdStoryStatusMapReply) String() string            { return proto.CompactTextString(m) }
func (*TapdStoryStatusMapReply) ProtoMessage()               {}
func (*TapdStoryStatusMapReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *TapdStoryStatusMapReply) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *TapdStoryStatusMapReply) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *TapdStoryStatusMapReply) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

// 请求 Tapd 查询需求状态映射的空响应
type TapdStoryStatusMapEmptyReply struct {
	// 状态
	Status int32 `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	// 数据
	Data []string `protobuf:"bytes,2,rep,name=data" json:"data,omitempty"`
	// 响应信息
	Info string `protobuf:"bytes,3,opt,name=info" json:"info,omitempty"`
}

func (m *TapdStoryStatusMapEmptyReply) Reset()                    { *m = TapdStoryStatusMapEmptyReply{} }
func (m *TapdStoryStatusMapEmptyReply) String() string            { return proto.CompactTextString(m) }
func (*TapdStoryStatusMapEmptyReply) ProtoMessage()               {}
func (*TapdStoryStatusMapEmptyReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *TapdStoryStatusMapEmptyReply) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *TapdStoryStatusMapEmptyReply) GetData() []string {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *TapdStoryStatusMapEmptyReply) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

// 请求 Tapd 查询需求数据的响应
type TapdStoryReply struct {
	// 状态
	Status int32 `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	// 数据
	Data []*TapdStoryDetail `protobuf:"bytes,2,rep,name=data" json:"data,omitempty"`
	// 响应信息
	Info string `protobuf:"bytes,3,opt,name=info" json:"info,omitempty"`
}

func (m *TapdStoryReply) Reset()                    { *m = TapdStoryReply{} }
func (m *TapdStoryReply) String() string            { return proto.CompactTextString(m) }
func (*TapdStoryReply) ProtoMessage()               {}
func (*TapdStoryReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *TapdStoryReply) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *TapdStoryReply) GetData() []*TapdStoryDetail {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *TapdStoryReply) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

type TapdStoryDetail struct {
	Story *TapdStory `protobuf:"bytes,1,opt,name=Story" json:"Story,omitempty"`
}

func (m *TapdStoryDetail) Reset()                    { *m = TapdStoryDetail{} }
func (m *TapdStoryDetail) String() string            { return proto.CompactTextString(m) }
func (*TapdStoryDetail) ProtoMessage()               {}
func (*TapdStoryDetail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *TapdStoryDetail) GetStory() *TapdStory {
	if m != nil {
		return m.Story
	}
	return nil
}

type TapdStory struct {
	// tapdStoryID
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// 需求名称
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// 需求描述
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// 项目ID
	WorkspaceId string `protobuf:"bytes,4,opt,name=workspace_id,json=workspaceId" json:"workspace_id,omitempty"`
	// 创建人
	Creator string `protobuf:"bytes,5,opt,name=creator" json:"creator,omitempty"`
	// 创建时间
	Created string `protobuf:"bytes,6,opt,name=created" json:"created,omitempty"`
	// 最后修改时间
	Modified string `protobuf:"bytes,7,opt,name=modified" json:"modified,omitempty"`
	// 需求状态
	Status string `protobuf:"bytes,8,opt,name=status" json:"status,omitempty"`
	// / 处理人
	Owner string `protobuf:"bytes,9,opt,name=owner" json:"owner,omitempty"`
	// 抄送人
	Cc string `protobuf:"bytes,10,opt,name=cc" json:"cc,omitempty"`
	// 迭代 ID
	IterationId string `protobuf:"bytes,12,opt,name=iteration_id,json=iterationId" json:"iteration_id,omitempty"`
	// 优先级
	Priority string `protobuf:"bytes,13,opt,name=priority" json:"priority,omitempty"`
	// 完成时间
	Completed string `protobuf:"bytes,14,opt,name=completed" json:"completed,omitempty"`
	// 工时
	Effort string `protobuf:"bytes,15,opt,name=effort" json:"effort,omitempty"`
}

func (m *TapdStory) Reset()                    { *m = TapdStory{} }
func (m *TapdStory) String() string            { return proto.CompactTextString(m) }
func (*TapdStory) ProtoMessage()               {}
func (*TapdStory) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *TapdStory) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TapdStory) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TapdStory) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *TapdStory) GetWorkspaceId() string {
	if m != nil {
		return m.WorkspaceId
	}
	return ""
}

func (m *TapdStory) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *TapdStory) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *TapdStory) GetModified() string {
	if m != nil {
		return m.Modified
	}
	return ""
}

func (m *TapdStory) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *TapdStory) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *TapdStory) GetCc() string {
	if m != nil {
		return m.Cc
	}
	return ""
}

func (m *TapdStory) GetIterationId() string {
	if m != nil {
		return m.IterationId
	}
	return ""
}

func (m *TapdStory) GetPriority() string {
	if m != nil {
		return m.Priority
	}
	return ""
}

func (m *TapdStory) GetCompleted() string {
	if m != nil {
		return m.Completed
	}
	return ""
}

func (m *TapdStory) GetEffort() string {
	if m != nil {
		return m.Effort
	}
	return ""
}

// 请求 Tapd 查询迭代数据的响应
type TapdIterationReply struct {
	// 状态
	Status int32 `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	// 数据
	Data []*TapdIterationDetail `protobuf:"bytes,2,rep,name=data" json:"data,omitempty"`
	// 响应信息
	Info string `protobuf:"bytes,3,opt,name=info" json:"info,omitempty"`
}

func (m *TapdIterationReply) Reset()                    { *m = TapdIterationReply{} }
func (m *TapdIterationReply) String() string            { return proto.CompactTextString(m) }
func (*TapdIterationReply) ProtoMessage()               {}
func (*TapdIterationReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *TapdIterationReply) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *TapdIterationReply) GetData() []*TapdIterationDetail {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *TapdIterationReply) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

type TapdIterationDetail struct {
	Iteration *TapdIteration `protobuf:"bytes,1,opt,name=Iteration" json:"Iteration,omitempty"`
}

func (m *TapdIterationDetail) Reset()                    { *m = TapdIterationDetail{} }
func (m *TapdIterationDetail) String() string            { return proto.CompactTextString(m) }
func (*TapdIterationDetail) ProtoMessage()               {}
func (*TapdIterationDetail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *TapdIterationDetail) GetIteration() *TapdIteration {
	if m != nil {
		return m.Iteration
	}
	return nil
}

type TapdIteration struct {
	Id          string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	WorkspaceId string `protobuf:"bytes,3,opt,name=workspace_id,json=workspaceId" json:"workspace_id,omitempty"`
	// e.g: "2021-11-19"
	Startdate string `protobuf:"bytes,4,opt,name=startdate" json:"startdate,omitempty"`
	// e.g: "2021-11-25"
	Enddate string `protobuf:"bytes,5,opt,name=enddate" json:"enddate,omitempty"`
	// open->开启/done->已关闭
	Status      string `protobuf:"bytes,6,opt,name=status" json:"status,omitempty"`
	Description string `protobuf:"bytes,7,opt,name=description" json:"description,omitempty"`
	// e.g: "copriwolf"
	Creator string `protobuf:"bytes,8,opt,name=creator" json:"creator,omitempty"`
	// e.g: "2021-11-03 10:40:34"
	Created string `protobuf:"bytes,9,opt,name=created" json:"created,omitempty"`
	// e.g: ""2021-11-03 10:40:34"
	Modified string `protobuf:"bytes,10,opt,name=modified" json:"modified,omitempty"`
}

func (m *TapdIteration) Reset()                    { *m = TapdIteration{} }
func (m *TapdIteration) String() string            { return proto.CompactTextString(m) }
func (*TapdIteration) ProtoMessage()               {}
func (*TapdIteration) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *TapdIteration) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TapdIteration) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TapdIteration) GetWorkspaceId() string {
	if m != nil {
		return m.WorkspaceId
	}
	return ""
}

func (m *TapdIteration) GetStartdate() string {
	if m != nil {
		return m.Startdate
	}
	return ""
}

func (m *TapdIteration) GetEnddate() string {
	if m != nil {
		return m.Enddate
	}
	return ""
}

func (m *TapdIteration) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *TapdIteration) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *TapdIteration) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *TapdIteration) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *TapdIteration) GetModified() string {
	if m != nil {
		return m.Modified
	}
	return ""
}

// NotionTaskChange Task变更数据
type NotionTaskChange struct {
	ChangeType       string      `protobuf:"bytes,99,opt,name=changeType" json:"changeType,omitempty"`
	TapdID           string      `protobuf:"bytes,1,opt,name=tapdID" json:"tapdID,omitempty"`
	NotionID         string      `protobuf:"bytes,2,opt,name=notionID" json:"notionID,omitempty"`
	LastModifiedTime string      `protobuf:"bytes,3,opt,name=last_modified_time,json=lastModifiedTime" json:"last_modified_time,omitempty"`
	NotionData       *NotionPage `protobuf:"bytes,4,opt,name=notionData" json:"notionData,omitempty"`
	TapdData         *TapdTask   `protobuf:"bytes,5,opt,name=tapdData" json:"tapdData,omitempty"`
}

func (m *NotionTaskChange) Reset()                    { *m = NotionTaskChange{} }
func (m *NotionTaskChange) String() string            { return proto.CompactTextString(m) }
func (*NotionTaskChange) ProtoMessage()               {}
func (*NotionTaskChange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *NotionTaskChange) GetChangeType() string {
	if m != nil {
		return m.ChangeType
	}
	return ""
}

func (m *NotionTaskChange) GetTapdID() string {
	if m != nil {
		return m.TapdID
	}
	return ""
}

func (m *NotionTaskChange) GetNotionID() string {
	if m != nil {
		return m.NotionID
	}
	return ""
}

func (m *NotionTaskChange) GetLastModifiedTime() string {
	if m != nil {
		return m.LastModifiedTime
	}
	return ""
}

func (m *NotionTaskChange) GetNotionData() *NotionPage {
	if m != nil {
		return m.NotionData
	}
	return nil
}

func (m *NotionTaskChange) GetTapdData() *TapdTask {
	if m != nil {
		return m.TapdData
	}
	return nil
}

// NotionStoryChange Story变更数据
type NotionStoryChange struct {
	ChangeType       string      `protobuf:"bytes,99,opt,name=changeType" json:"changeType,omitempty"`
	StoryID          string      `protobuf:"bytes,1,opt,name=storyID" json:"storyID,omitempty"`
	NotionID         string      `protobuf:"bytes,2,opt,name=notionID" json:"notionID,omitempty"`
	LastModifiedTime string      `protobuf:"bytes,3,opt,name=last_modified_time,json=lastModifiedTime" json:"last_modified_time,omitempty"`
	NotionData       *NotionPage `protobuf:"bytes,4,opt,name=notionData" json:"notionData,omitempty"`
	TapdData         *TapdStory  `protobuf:"bytes,5,opt,name=tapdData" json:"tapdData,omitempty"`
}

func (m *NotionStoryChange) Reset()                    { *m = NotionStoryChange{} }
func (m *NotionStoryChange) String() string            { return proto.CompactTextString(m) }
func (*NotionStoryChange) ProtoMessage()               {}
func (*NotionStoryChange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *NotionStoryChange) GetChangeType() string {
	if m != nil {
		return m.ChangeType
	}
	return ""
}

func (m *NotionStoryChange) GetStoryID() string {
	if m != nil {
		return m.StoryID
	}
	return ""
}

func (m *NotionStoryChange) GetNotionID() string {
	if m != nil {
		return m.NotionID
	}
	return ""
}

func (m *NotionStoryChange) GetLastModifiedTime() string {
	if m != nil {
		return m.LastModifiedTime
	}
	return ""
}

func (m *NotionStoryChange) GetNotionData() *NotionPage {
	if m != nil {
		return m.NotionData
	}
	return nil
}

func (m *NotionStoryChange) GetTapdData() *TapdStory {
	if m != nil {
		return m.TapdData
	}
	return nil
}

type NotionDataBaseQueryRequest struct {
	// 下一个节点
	StartCursor string `protobuf:"bytes,1,opt,name=start_cursor,json=startCursor" json:"start_cursor,omitempty"`
	// 排序方式
	Sorts []*NotionDataBaseQuerySort `protobuf:"bytes,2,rep,name=sorts" json:"sorts,omitempty"`
}

func (m *NotionDataBaseQueryRequest) Reset()                    { *m = NotionDataBaseQueryRequest{} }
func (m *NotionDataBaseQueryRequest) String() string            { return proto.CompactTextString(m) }
func (*NotionDataBaseQueryRequest) ProtoMessage()               {}
func (*NotionDataBaseQueryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *NotionDataBaseQueryRequest) GetStartCursor() string {
	if m != nil {
		return m.StartCursor
	}
	return ""
}

func (m *NotionDataBaseQueryRequest) GetSorts() []*NotionDataBaseQuerySort {
	if m != nil {
		return m.Sorts
	}
	return nil
}

type NotionDataBaseQuerySort struct {
	// 字段名
	Property string `protobuf:"bytes,1,opt,name=property" json:"property,omitempty"`
	// 排序顺序
	Direction string `protobuf:"bytes,2,opt,name=direction" json:"direction,omitempty"`
}

func (m *NotionDataBaseQuerySort) Reset()                    { *m = NotionDataBaseQuerySort{} }
func (m *NotionDataBaseQuerySort) String() string            { return proto.CompactTextString(m) }
func (*NotionDataBaseQuerySort) ProtoMessage()               {}
func (*NotionDataBaseQuerySort) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *NotionDataBaseQuerySort) GetProperty() string {
	if m != nil {
		return m.Property
	}
	return ""
}

func (m *NotionDataBaseQuerySort) GetDirection() string {
	if m != nil {
		return m.Direction
	}
	return ""
}

// NotionDataBaseQueryReply 查询数据库响应
type NotionDataBaseQueryReply struct {
	Object     string        `protobuf:"bytes,1,opt,name=object" json:"object,omitempty"`
	Results    []*NotionPage `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
	NextCursor string        `protobuf:"bytes,3,opt,name=next_cursor,json=nextCursor" json:"next_cursor,omitempty"`
}

func (m *NotionDataBaseQueryReply) Reset()                    { *m = NotionDataBaseQueryReply{} }
func (m *NotionDataBaseQueryReply) String() string            { return proto.CompactTextString(m) }
func (*NotionDataBaseQueryReply) ProtoMessage()               {}
func (*NotionDataBaseQueryReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *NotionDataBaseQueryReply) GetObject() string {
	if m != nil {
		return m.Object
	}
	return ""
}

func (m *NotionDataBaseQueryReply) GetResults() []*NotionPage {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *NotionDataBaseQueryReply) GetNextCursor() string {
	if m != nil {
		return m.NextCursor
	}
	return ""
}

// NotionPage 页面属性
type NotionPage struct {
	// 类型
	Object string `protobuf:"bytes,1,opt,name=object" json:"object,omitempty"`
	// pageID
	Id string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	// 创建时间
	CreatedTime string `protobuf:"bytes,3,opt,name=created_time,json=createdTime" json:"created_time,omitempty"`
	// 最后修改时间
	LastEditedTime string `protobuf:"bytes,4,opt,name=last_edited_time,json=lastEditedTime" json:"last_edited_time,omitempty"`
	// 是否归档
	Archived bool `protobuf:"varint,5,opt,name=archived" json:"archived,omitempty"`
	// pageURL
	Url string `protobuf:"bytes,6,opt,name=url" json:"url,omitempty"`
	// 字段
	Properties map[string]*NotionProperty `protobuf:"bytes,7,rep,name=properties" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *NotionPage) Reset()                    { *m = NotionPage{} }
func (m *NotionPage) String() string            { return proto.CompactTextString(m) }
func (*NotionPage) ProtoMessage()               {}
func (*NotionPage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *NotionPage) GetObject() string {
	if m != nil {
		return m.Object
	}
	return ""
}

func (m *NotionPage) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NotionPage) GetCreatedTime() string {
	if m != nil {
		return m.CreatedTime
	}
	return ""
}

func (m *NotionPage) GetLastEditedTime() string {
	if m != nil {
		return m.LastEditedTime
	}
	return ""
}

func (m *NotionPage) GetArchived() bool {
	if m != nil {
		return m.Archived
	}
	return false
}

func (m *NotionPage) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *NotionPage) GetProperties() map[string]*NotionProperty {
	if m != nil {
		return m.Properties
	}
	return nil
}

// NotionProperty 字段属性
type NotionProperty struct {
	// 字段 ID
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// 字段类型
	Type string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	// 富文本数据(rich_text类型特有)
	RichText []*NotionTypeRichText `protobuf:"bytes,10,rep,name=rich_text,json=richText" json:"rich_text,omitempty"`
	// 最后修改时间(last_edited_time类型特有)
	LastEditedTime string `protobuf:"bytes,11,opt,name=last_edited_time,json=lastEditedTime" json:"last_edited_time,omitempty"`
	// 创建时间(created_time类型特有)
	CreatedTime string `protobuf:"bytes,12,opt,name=created_time,json=createdTime" json:"created_time,omitempty"`
	// 多选数据（multi_select类型特有）
	MultiSelect []*NotionTypeSelect `protobuf:"bytes,13,rep,name=multi_select,json=multiSelect" json:"multi_select,omitempty"`
	// 标题数据（title类型特有）
	Title []*NotionTypeTitle `protobuf:"bytes,14,rep,name=title" json:"title,omitempty"`
	// 单选数据（select类型特有）
	Select *NotionTypeSelect `protobuf:"bytes,15,opt,name=select" json:"select,omitempty"`
	// 数字类型（number类型特有）
	Number int64 `protobuf:"varint,16,opt,name=number" json:"number,omitempty"`
	// 日期类型（date类型特有）
	Date *NotionTypeDate `protobuf:"bytes,17,opt,name=date" json:"date,omitempty"`
}

func (m *NotionProperty) Reset()                    { *m = NotionProperty{} }
func (m *NotionProperty) String() string            { return proto.CompactTextString(m) }
func (*NotionProperty) ProtoMessage()               {}
func (*NotionProperty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *NotionProperty) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NotionProperty) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *NotionProperty) GetRichText() []*NotionTypeRichText {
	if m != nil {
		return m.RichText
	}
	return nil
}

func (m *NotionProperty) GetLastEditedTime() string {
	if m != nil {
		return m.LastEditedTime
	}
	return ""
}

func (m *NotionProperty) GetCreatedTime() string {
	if m != nil {
		return m.CreatedTime
	}
	return ""
}

func (m *NotionProperty) GetMultiSelect() []*NotionTypeSelect {
	if m != nil {
		return m.MultiSelect
	}
	return nil
}

func (m *NotionProperty) GetTitle() []*NotionTypeTitle {
	if m != nil {
		return m.Title
	}
	return nil
}

func (m *NotionProperty) GetSelect() *NotionTypeSelect {
	if m != nil {
		return m.Select
	}
	return nil
}

func (m *NotionProperty) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *NotionProperty) GetDate() *NotionTypeDate {
	if m != nil {
		return m.Date
	}
	return nil
}

// 日期类型（date类型特有）
type NotionTypeDate struct {
	// 开始时间
	Start string `protobuf:"bytes,1,opt,name=start" json:"start,omitempty"`
	// 结束时间，没有为 null
	End string `protobuf:"bytes,2,opt,name=end" json:"end,omitempty"`
}

func (m *NotionTypeDate) Reset()                    { *m = NotionTypeDate{} }
func (m *NotionTypeDate) String() string            { return proto.CompactTextString(m) }
func (*NotionTypeDate) ProtoMessage()               {}
func (*NotionTypeDate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *NotionTypeDate) GetStart() string {
	if m != nil {
		return m.Start
	}
	return ""
}

func (m *NotionTypeDate) GetEnd() string {
	if m != nil {
		return m.End
	}
	return ""
}

// 多选数据（multi_select类型特有）
type NotionTypeMultiSelect struct {
	// id
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// 标签名
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// 颜色
	Color string `protobuf:"bytes,3,opt,name=color" json:"color,omitempty"`
}

func (m *NotionTypeMultiSelect) Reset()                    { *m = NotionTypeMultiSelect{} }
func (m *NotionTypeMultiSelect) String() string            { return proto.CompactTextString(m) }
func (*NotionTypeMultiSelect) ProtoMessage()               {}
func (*NotionTypeMultiSelect) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *NotionTypeMultiSelect) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NotionTypeMultiSelect) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NotionTypeMultiSelect) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

// 单选数据（select类型特有）
type NotionTypeSelect struct {
	// id
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// 名称
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// 颜色
	Color string `protobuf:"bytes,3,opt,name=color" json:"color,omitempty"`
}

func (m *NotionTypeSelect) Reset()                    { *m = NotionTypeSelect{} }
func (m *NotionTypeSelect) String() string            { return proto.CompactTextString(m) }
func (*NotionTypeSelect) ProtoMessage()               {}
func (*NotionTypeSelect) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *NotionTypeSelect) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NotionTypeSelect) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NotionTypeSelect) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

type NotionTypeTitle struct {
	// 类型
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// 显示文本
	PlainText string `protobuf:"bytes,2,opt,name=plain_text,json=plainText" json:"plain_text,omitempty"`
	// 超链接
	Href string `protobuf:"bytes,3,opt,name=href" json:"href,omitempty"`
	// 具体实现
	Text *NotionTypeTextInternal `protobuf:"bytes,4,opt,name=text" json:"text,omitempty"`
}

func (m *NotionTypeTitle) Reset()                    { *m = NotionTypeTitle{} }
func (m *NotionTypeTitle) String() string            { return proto.CompactTextString(m) }
func (*NotionTypeTitle) ProtoMessage()               {}
func (*NotionTypeTitle) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *NotionTypeTitle) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *NotionTypeTitle) GetPlainText() string {
	if m != nil {
		return m.PlainText
	}
	return ""
}

func (m *NotionTypeTitle) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *NotionTypeTitle) GetText() *NotionTypeTextInternal {
	if m != nil {
		return m.Text
	}
	return nil
}

type NotionTypeTextInternal struct {
	Content string `protobuf:"bytes,1,opt,name=content" json:"content,omitempty"`
	Link    string `protobuf:"bytes,2,opt,name=link" json:"link,omitempty"`
}

func (m *NotionTypeTextInternal) Reset()                    { *m = NotionTypeTextInternal{} }
func (m *NotionTypeTextInternal) String() string            { return proto.CompactTextString(m) }
func (*NotionTypeTextInternal) ProtoMessage()               {}
func (*NotionTypeTextInternal) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *NotionTypeTextInternal) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *NotionTypeTextInternal) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

type NotionTypeUser struct {
	Object    string                `protobuf:"bytes,1,opt,name=object" json:"object,omitempty"`
	Id        string                `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Type      string                `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	Name      string                `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	AvatarUrl string                `protobuf:"bytes,5,opt,name=avatar_url,json=avatarUrl" json:"avatar_url,omitempty"`
	Person    *NotionTypeUserPerson `protobuf:"bytes,6,opt,name=person" json:"person,omitempty"`
}

func (m *NotionTypeUser) Reset()                    { *m = NotionTypeUser{} }
func (m *NotionTypeUser) String() string            { return proto.CompactTextString(m) }
func (*NotionTypeUser) ProtoMessage()               {}
func (*NotionTypeUser) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *NotionTypeUser) GetObject() string {
	if m != nil {
		return m.Object
	}
	return ""
}

func (m *NotionTypeUser) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NotionTypeUser) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *NotionTypeUser) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NotionTypeUser) GetAvatarUrl() string {
	if m != nil {
		return m.AvatarUrl
	}
	return ""
}

func (m *NotionTypeUser) GetPerson() *NotionTypeUserPerson {
	if m != nil {
		return m.Person
	}
	return nil
}

type NotionTypeUserPerson struct {
	Email string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
}

func (m *NotionTypeUserPerson) Reset()                    { *m = NotionTypeUserPerson{} }
func (m *NotionTypeUserPerson) String() string            { return proto.CompactTextString(m) }
func (*NotionTypeUserPerson) ProtoMessage()               {}
func (*NotionTypeUserPerson) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *NotionTypeUserPerson) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type NotionTypeRichText struct {
	// 类型
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// 纯文字
	PlainText string `protobuf:"bytes,2,opt,name=plain_text,json=plainText" json:"plain_text,omitempty"`
	// 跳转地址
	Href string `protobuf:"bytes,3,opt,name=href" json:"href,omitempty"`
	// 具体实现
	Text *NotionTypeTextInternal `protobuf:"bytes,4,opt,name=text" json:"text,omitempty"`
}

func (m *NotionTypeRichText) Reset()                    { *m = NotionTypeRichText{} }
func (m *NotionTypeRichText) String() string            { return proto.CompactTextString(m) }
func (*NotionTypeRichText) ProtoMessage()               {}
func (*NotionTypeRichText) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *NotionTypeRichText) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *NotionTypeRichText) GetPlainText() string {
	if m != nil {
		return m.PlainText
	}
	return ""
}

func (m *NotionTypeRichText) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *NotionTypeRichText) GetText() *NotionTypeTextInternal {
	if m != nil {
		return m.Text
	}
	return nil
}

type TapdUserInfo struct {
	UserWorkspace *TapdUser `protobuf:"bytes,1,opt,name=userWorkspace" json:"userWorkspace,omitempty"`
}

func (m *TapdUserInfo) Reset()                    { *m = TapdUserInfo{} }
func (m *TapdUserInfo) String() string            { return proto.CompactTextString(m) }
func (*TapdUserInfo) ProtoMessage()               {}
func (*TapdUserInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *TapdUserInfo) GetUserWorkspace() *TapdUser {
	if m != nil {
		return m.UserWorkspace
	}
	return nil
}

type TapdUser struct {
	// nickName
	User string `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	// realName
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// 成员角色 id
	RoleId []string `protobuf:"bytes,3,rep,name=role_id,json=roleId" json:"role_id,omitempty"`
}

func (m *TapdUser) Reset()                    { *m = TapdUser{} }
func (m *TapdUser) String() string            { return proto.CompactTextString(m) }
func (*TapdUser) ProtoMessage()               {}
func (*TapdUser) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *TapdUser) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *TapdUser) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TapdUser) GetRoleId() []string {
	if m != nil {
		return m.RoleId
	}
	return nil
}

type NotionPageCreateRequest struct {
	Parent     *NotionPageParent              `protobuf:"bytes,1,opt,name=parent" json:"parent,omitempty"`
	Properties map[string]*NotionPageProperty `protobuf:"bytes,2,rep,name=properties" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *NotionPageCreateRequest) Reset()                    { *m = NotionPageCreateRequest{} }
func (m *NotionPageCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*NotionPageCreateRequest) ProtoMessage()               {}
func (*NotionPageCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *NotionPageCreateRequest) GetParent() *NotionPageParent {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *NotionPageCreateRequest) GetProperties() map[string]*NotionPageProperty {
	if m != nil {
		return m.Properties
	}
	return nil
}

type NotionPageUpdateRequest struct {
	Properties map[string]*NotionPageProperty `protobuf:"bytes,1,rep,name=properties" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *NotionPageUpdateRequest) Reset()                    { *m = NotionPageUpdateRequest{} }
func (m *NotionPageUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*NotionPageUpdateRequest) ProtoMessage()               {}
func (*NotionPageUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *NotionPageUpdateRequest) GetProperties() map[string]*NotionPageProperty {
	if m != nil {
		return m.Properties
	}
	return nil
}

type NotionPageParent struct {
	// db id
	DatabaseId string `protobuf:"bytes,1,opt,name=database_id,json=databaseId" json:"database_id,omitempty"`
}

func (m *NotionPageParent) Reset()                    { *m = NotionPageParent{} }
func (m *NotionPageParent) String() string            { return proto.CompactTextString(m) }
func (*NotionPageParent) ProtoMessage()               {}
func (*NotionPageParent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *NotionPageParent) GetDatabaseId() string {
	if m != nil {
		return m.DatabaseId
	}
	return ""
}

type NotionPageProperty struct {
	Select         *NotionTypeSelect     `protobuf:"bytes,1,opt,name=select" json:"select,omitempty"`
	Title          []*NotionTypeTitle    `protobuf:"bytes,2,rep,name=title" json:"title,omitempty"`
	Date           *NotionTypeDate       `protobuf:"bytes,3,opt,name=date" json:"date,omitempty"`
	RichText       []*NotionTypeRichText `protobuf:"bytes,4,rep,name=rich_text,json=richText" json:"rich_text,omitempty"`
	LastEditedTime string                `protobuf:"bytes,5,opt,name=last_edited_time,json=lastEditedTime" json:"last_edited_time,omitempty"`
	CreatedTime    string                `protobuf:"bytes,6,opt,name=created_time,json=createdTime" json:"created_time,omitempty"`
	MultiSelect    []*NotionTypeSelect   `protobuf:"bytes,7,rep,name=multi_select,json=multiSelect" json:"multi_select,omitempty"`
	Number         int64                 `protobuf:"varint,8,opt,name=number" json:"number,omitempty"`
	Url            string                `protobuf:"bytes,9,opt,name=url" json:"url,omitempty"`
}

func (m *NotionPageProperty) Reset()                    { *m = NotionPageProperty{} }
func (m *NotionPageProperty) String() string            { return proto.CompactTextString(m) }
func (*NotionPageProperty) ProtoMessage()               {}
func (*NotionPageProperty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *NotionPageProperty) GetSelect() *NotionTypeSelect {
	if m != nil {
		return m.Select
	}
	return nil
}

func (m *NotionPageProperty) GetTitle() []*NotionTypeTitle {
	if m != nil {
		return m.Title
	}
	return nil
}

func (m *NotionPageProperty) GetDate() *NotionTypeDate {
	if m != nil {
		return m.Date
	}
	return nil
}

func (m *NotionPageProperty) GetRichText() []*NotionTypeRichText {
	if m != nil {
		return m.RichText
	}
	return nil
}

func (m *NotionPageProperty) GetLastEditedTime() string {
	if m != nil {
		return m.LastEditedTime
	}
	return ""
}

func (m *NotionPageProperty) GetCreatedTime() string {
	if m != nil {
		return m.CreatedTime
	}
	return ""
}

func (m *NotionPageProperty) GetMultiSelect() []*NotionTypeSelect {
	if m != nil {
		return m.MultiSelect
	}
	return nil
}

func (m *NotionPageProperty) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *NotionPageProperty) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type NotionRequestErrReply struct {
	Code    string `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *NotionRequestErrReply) Reset()                    { *m = NotionRequestErrReply{} }
func (m *NotionRequestErrReply) String() string            { return proto.CompactTextString(m) }
func (*NotionRequestErrReply) ProtoMessage()               {}
func (*NotionRequestErrReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *NotionRequestErrReply) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *NotionRequestErrReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// NotionExchangeTokenRequest 请求换取 AccessToken
type NotionExchangeTokenRequest struct {
	GrantType   string `protobuf:"bytes,1,opt,name=grant_type,json=grantType" json:"grant_type,omitempty"`
	Code        string `protobuf:"bytes,2,opt,name=code" json:"code,omitempty"`
	RedirectUri string `protobuf:"bytes,3,opt,name=redirect_uri,json=redirectUri" json:"redirect_uri,omitempty"`
}

func (m *NotionExchangeTokenRequest) Reset()                    { *m = NotionExchangeTokenRequest{} }
func (m *NotionExchangeTokenRequest) String() string            { return proto.CompactTextString(m) }
func (*NotionExchangeTokenRequest) ProtoMessage()               {}
func (*NotionExchangeTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *NotionExchangeTokenRequest) GetGrantType() string {
	if m != nil {
		return m.GrantType
	}
	return ""
}

func (m *NotionExchangeTokenRequest) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *NotionExchangeTokenRequest) GetRedirectUri() string {
	if m != nil {
		return m.RedirectUri
	}
	return ""
}

type NotionExchangeTokenReply struct {
	AccessToken   string               `protobuf:"bytes,1,opt,name=access_token,json=accessToken" json:"access_token,omitempty"`
	WorkspaceId   string               `protobuf:"bytes,2,opt,name=workspace_id,json=workspaceId" json:"workspace_id,omitempty"`
	WorkspaceName string               `protobuf:"bytes,3,opt,name=workspace_name,json=workspaceName" json:"workspace_name,omitempty"`
	WorkspaceIcon string               `protobuf:"bytes,4,opt,name=workspace_icon,json=workspaceIcon" json:"workspace_icon,omitempty"`
	BotId         string               `protobuf:"bytes,5,opt,name=bot_id,json=botId" json:"bot_id,omitempty"`
	Owner         *NotionExchangeOwner `protobuf:"bytes,6,opt,name=owner" json:"owner,omitempty"`
}

func (m *NotionExchangeTokenReply) Reset()                    { *m = NotionExchangeTokenReply{} }
func (m *NotionExchangeTokenReply) String() string            { return proto.CompactTextString(m) }
func (*NotionExchangeTokenReply) ProtoMessage()               {}
func (*NotionExchangeTokenReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *NotionExchangeTokenReply) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *NotionExchangeTokenReply) GetWorkspaceId() string {
	if m != nil {
		return m.WorkspaceId
	}
	return ""
}

func (m *NotionExchangeTokenReply) GetWorkspaceName() string {
	if m != nil {
		return m.WorkspaceName
	}
	return ""
}

func (m *NotionExchangeTokenReply) GetWorkspaceIcon() string {
	if m != nil {
		return m.WorkspaceIcon
	}
	return ""
}

func (m *NotionExchangeTokenReply) GetBotId() string {
	if m != nil {
		return m.BotId
	}
	return ""
}

func (m *NotionExchangeTokenReply) GetOwner() *NotionExchangeOwner {
	if m != nil {
		return m.Owner
	}
	return nil
}

type NotionExchangeOwner struct {
	Type string          `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	User *NotionTypeUser `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
}

func (m *NotionExchangeOwner) Reset()                    { *m = NotionExchangeOwner{} }
func (m *NotionExchangeOwner) String() string            { return proto.CompactTextString(m) }
func (*NotionExchangeOwner) ProtoMessage()               {}
func (*NotionExchangeOwner) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *NotionExchangeOwner) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *NotionExchangeOwner) GetUser() *NotionTypeUser {
	if m != nil {
		return m.User
	}
	return nil
}

type NotionExchangeErrReply struct {
	Error string `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *NotionExchangeErrReply) Reset()                    { *m = NotionExchangeErrReply{} }
func (m *NotionExchangeErrReply) String() string            { return proto.CompactTextString(m) }
func (*NotionExchangeErrReply) ProtoMessage()               {}
func (*NotionExchangeErrReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *NotionExchangeErrReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type WxNotify struct {
	Msgtype  string                `protobuf:"bytes,1,opt,name=msgtype" json:"msgtype,omitempty"`
	Markdown *WxNotifyTypeMarkdown `protobuf:"bytes,2,opt,name=markdown" json:"markdown,omitempty"`
}

func (m *WxNotify) Reset()                    { *m = WxNotify{} }
func (m *WxNotify) String() string            { return proto.CompactTextString(m) }
func (*WxNotify) ProtoMessage()               {}
func (*WxNotify) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *WxNotify) GetMsgtype() string {
	if m != nil {
		return m.Msgtype
	}
	return ""
}

func (m *WxNotify) GetMarkdown() *WxNotifyTypeMarkdown {
	if m != nil {
		return m.Markdown
	}
	return nil
}

type WxNotifyTypeMarkdown struct {
	// max 4096 字节
	Content string `protobuf:"bytes,1,opt,name=content" json:"content,omitempty"`
}

func (m *WxNotifyTypeMarkdown) Reset()                    { *m = WxNotifyTypeMarkdown{} }
func (m *WxNotifyTypeMarkdown) String() string            { return proto.CompactTextString(m) }
func (*WxNotifyTypeMarkdown) ProtoMessage()               {}
func (*WxNotifyTypeMarkdown) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *WxNotifyTypeMarkdown) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func init() {
	proto.RegisterType((*TapdUserReply)(nil), "matrix_channel_pb.TapdUserReply")
	proto.RegisterType((*NotionUserChange)(nil), "matrix_channel_pb.NotionUserChange")
	proto.RegisterType((*TapdUserWorkspaceReply)(nil), "matrix_channel_pb.TapdUserWorkspaceReply")
	proto.RegisterType((*TapdUserWorkspaceDetail)(nil), "matrix_channel_pb.TapdUserWorkspaceDetail")
	proto.RegisterType((*TapdWorkspace)(nil), "matrix_channel_pb.TapdWorkspace")
	proto.RegisterType((*TapdTaskReply)(nil), "matrix_channel_pb.TapdTaskReply")
	proto.RegisterType((*TapdTaskDetail)(nil), "matrix_channel_pb.TapdTaskDetail")
	proto.RegisterType((*TapdTask)(nil), "matrix_channel_pb.TapdTask")
	proto.RegisterType((*TapdStoryStatusMapReply)(nil), "matrix_channel_pb.TapdStoryStatusMapReply")
	proto.RegisterType((*TapdStoryStatusMapEmptyReply)(nil), "matrix_channel_pb.TapdStoryStatusMapEmptyReply")
	proto.RegisterType((*TapdStoryReply)(nil), "matrix_channel_pb.TapdStoryReply")
	proto.RegisterType((*TapdStoryDetail)(nil), "matrix_channel_pb.TapdStoryDetail")
	proto.RegisterType((*TapdStory)(nil), "matrix_channel_pb.TapdStory")
	proto.RegisterType((*TapdIterationReply)(nil), "matrix_channel_pb.TapdIterationReply")
	proto.RegisterType((*TapdIterationDetail)(nil), "matrix_channel_pb.TapdIterationDetail")
	proto.RegisterType((*TapdIteration)(nil), "matrix_channel_pb.TapdIteration")
	proto.RegisterType((*NotionTaskChange)(nil), "matrix_channel_pb.NotionTaskChange")
	proto.RegisterType((*NotionStoryChange)(nil), "matrix_channel_pb.NotionStoryChange")
	proto.RegisterType((*NotionDataBaseQueryRequest)(nil), "matrix_channel_pb.NotionDataBaseQueryRequest")
	proto.RegisterType((*NotionDataBaseQuerySort)(nil), "matrix_channel_pb.NotionDataBaseQuerySort")
	proto.RegisterType((*NotionDataBaseQueryReply)(nil), "matrix_channel_pb.NotionDataBaseQueryReply")
	proto.RegisterType((*NotionPage)(nil), "matrix_channel_pb.NotionPage")
	proto.RegisterType((*NotionProperty)(nil), "matrix_channel_pb.NotionProperty")
	proto.RegisterType((*NotionTypeDate)(nil), "matrix_channel_pb.NotionTypeDate")
	proto.RegisterType((*NotionTypeMultiSelect)(nil), "matrix_channel_pb.NotionTypeMultiSelect")
	proto.RegisterType((*NotionTypeSelect)(nil), "matrix_channel_pb.NotionTypeSelect")
	proto.RegisterType((*NotionTypeTitle)(nil), "matrix_channel_pb.NotionTypeTitle")
	proto.RegisterType((*NotionTypeTextInternal)(nil), "matrix_channel_pb.NotionTypeTextInternal")
	proto.RegisterType((*NotionTypeUser)(nil), "matrix_channel_pb.NotionTypeUser")
	proto.RegisterType((*NotionTypeUserPerson)(nil), "matrix_channel_pb.NotionTypeUserPerson")
	proto.RegisterType((*NotionTypeRichText)(nil), "matrix_channel_pb.NotionTypeRichText")
	proto.RegisterType((*TapdUserInfo)(nil), "matrix_channel_pb.TapdUserInfo")
	proto.RegisterType((*TapdUser)(nil), "matrix_channel_pb.TapdUser")
	proto.RegisterType((*NotionPageCreateRequest)(nil), "matrix_channel_pb.NotionPageCreateRequest")
	proto.RegisterType((*NotionPageUpdateRequest)(nil), "matrix_channel_pb.NotionPageUpdateRequest")
	proto.RegisterType((*NotionPageParent)(nil), "matrix_channel_pb.NotionPageParent")
	proto.RegisterType((*NotionPageProperty)(nil), "matrix_channel_pb.NotionPageProperty")
	proto.RegisterType((*NotionRequestErrReply)(nil), "matrix_channel_pb.NotionRequestErrReply")
	proto.RegisterType((*NotionExchangeTokenRequest)(nil), "matrix_channel_pb.NotionExchangeTokenRequest")
	proto.RegisterType((*NotionExchangeTokenReply)(nil), "matrix_channel_pb.NotionExchangeTokenReply")
	proto.RegisterType((*NotionExchangeOwner)(nil), "matrix_channel_pb.NotionExchangeOwner")
	proto.RegisterType((*NotionExchangeErrReply)(nil), "matrix_channel_pb.NotionExchangeErrReply")
	proto.RegisterType((*WxNotify)(nil), "matrix_channel_pb.WxNotify")
	proto.RegisterType((*WxNotifyTypeMarkdown)(nil), "matrix_channel_pb.WxNotifyTypeMarkdown")
}

func init() { proto.RegisterFile("matrix_channel.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1930 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x59, 0xcd, 0x73, 0xdc, 0x48,
	0x15, 0xaf, 0xf9, 0xf4, 0xcc, 0x1b, 0x7f, 0x24, 0xbd, 0xde, 0x44, 0x98, 0x84, 0xb5, 0x45, 0x65,
	0x31, 0xd4, 0xe2, 0xa5, 0x1c, 0x96, 0xa4, 0x12, 0x76, 0x61, 0x13, 0x7b, 0x8b, 0x29, 0x48, 0x70,
	0x64, 0xbb, 0xb6, 0xd8, 0x03, 0xb3, 0x6d, 0xa9, 0x6d, 0x0b, 0x6b, 0x24, 0xd1, 0xea, 0x49, 0xec,
	0x2a, 0x2e, 0x14, 0x1c, 0x73, 0x80, 0x13, 0x14, 0x7f, 0x0d, 0x17, 0xaa, 0xb8, 0x73, 0xe4, 0xc2,
	0x7f, 0xc1, 0x95, 0x7a, 0xfd, 0x25, 0xc9, 0xa3, 0xd1, 0x4c, 0x80, 0x2a, 0x52, 0xc5, 0x4d, 0xef,
	0xf5, 0x7b, 0xdd, 0xef, 0xe3, 0xd7, 0xef, 0x3d, 0x49, 0xb0, 0x3e, 0xa6, 0x82, 0x87, 0x97, 0x23,
	0xff, 0x9c, 0xc6, 0x31, 0x8b, 0x76, 0x52, 0x9e, 0x88, 0x84, 0xdc, 0x2c, 0x73, 0x47, 0xe9, 0x89,
	0x9b, 0xc2, 0xca, 0x11, 0x4d, 0x83, 0xe3, 0x8c, 0x71, 0x8f, 0xa5, 0xd1, 0x15, 0xb9, 0x05, 0xdd,
	0x4c, 0x50, 0x31, 0xc9, 0x9c, 0xc6, 0x66, 0x63, 0xbb, 0xe3, 0x69, 0x8a, 0xdc, 0x87, 0x76, 0x40,
	0x05, 0x75, 0x9a, 0x9b, 0xad, 0xed, 0xc1, 0xee, 0x7b, 0x3b, 0x53, 0x5b, 0xed, 0x98, 0x7d, 0x86,
	0xf1, 0x69, 0xe2, 0x49, 0x61, 0x42, 0xa0, 0x1d, 0xc6, 0xa7, 0x89, 0xd3, 0xda, 0x6c, 0x6c, 0xf7,
	0x3d, 0xf9, 0xec, 0x9e, 0xc0, 0x8d, 0xe7, 0x89, 0x08, 0x93, 0x18, 0x65, 0x9f, 0x9e, 0xd3, 0xf8,
	0x8c, 0x91, 0x0d, 0xe8, 0xc5, 0xa1, 0x7f, 0xf1, 0x9c, 0x8e, 0x99, 0x3c, 0xb6, 0xef, 0x59, 0x1a,
	0xd7, 0x38, 0xa3, 0x91, 0x5c, 0x6b, 0xaa, 0x35, 0x43, 0xa3, 0xb1, 0x29, 0x3d, 0x63, 0xc3, 0x3d,
	0x7d, 0x82, 0xa6, 0xdc, 0xdf, 0x36, 0xe0, 0x96, 0x31, 0xe7, 0xf3, 0x84, 0x5f, 0x64, 0x29, 0xf5,
	0x59, 0xbd, 0x7f, 0x9f, 0x94, 0xfc, 0xfb, 0x56, 0x8d, 0x7f, 0x76, 0xc3, 0x3d, 0x26, 0x68, 0x18,
	0xd5, 0xb8, 0xfa, 0x33, 0xb8, 0x3d, 0x43, 0x89, 0x7c, 0x02, 0x7d, 0xcb, 0x92, 0x96, 0x0c, 0x76,
	0x37, 0x67, 0x9c, 0x99, 0x3b, 0x90, 0xab, 0xb8, 0xf7, 0x55, 0xde, 0x2c, 0x83, 0xac, 0x42, 0x33,
	0x0c, 0x74, 0xf0, 0x9a, 0x61, 0x80, 0xf6, 0xc4, 0x79, 0xc8, 0xe4, 0xb3, 0xcb, 0x95, 0xd2, 0x11,
	0xcd, 0x2e, 0xea, 0x83, 0xf1, 0x51, 0x29, 0x18, 0x5b, 0x33, 0x0c, 0xc3, 0x7d, 0xe6, 0xc6, 0xe0,
	0x53, 0x58, 0x2d, 0xcb, 0x92, 0x0f, 0xa1, 0x8d, 0x94, 0xf6, 0xfa, 0xab, 0x35, 0x9b, 0x7b, 0x52,
	0xd0, 0xfd, 0x7d, 0x0b, 0x7a, 0x86, 0xb5, 0x88, 0x9f, 0x64, 0x13, 0x06, 0x01, 0xcb, 0x7c, 0x1e,
	0xa6, 0x88, 0x33, 0x6d, 0x4e, 0x91, 0x45, 0xb6, 0x60, 0xf9, 0x95, 0x09, 0xdd, 0x28, 0x0c, 0x9c,
	0xb6, 0x12, 0xb1, 0xbc, 0x61, 0x40, 0x1c, 0x58, 0xf2, 0x39, 0xa3, 0x22, 0xe1, 0x4e, 0x47, 0xae,
	0x1a, 0xd2, 0xae, 0xb0, 0xc0, 0xe9, 0x16, 0x56, 0x58, 0x80, 0x58, 0x1d, 0x27, 0x41, 0x78, 0x1a,
	0xb2, 0xc0, 0x59, 0x52, 0x58, 0x35, 0x74, 0x21, 0xd6, 0x3d, 0x85, 0x55, 0x1d, 0xeb, 0x75, 0xe8,
	0x24, 0xaf, 0x62, 0xc6, 0x9d, 0xbe, 0x64, 0x2b, 0x02, 0xdd, 0xf4, 0x7d, 0x07, 0x94, 0x9b, 0xbe,
	0x4f, 0xbe, 0x02, 0xbd, 0x4c, 0x24, 0xfc, 0x0a, 0x8d, 0x1d, 0xa8, 0x43, 0x25, 0x3d, 0x0c, 0xd0,
	0x97, 0x50, 0x30, 0x4e, 0xd1, 0x31, 0x5c, 0x5e, 0x56, 0xbe, 0x58, 0xde, 0x50, 0xda, 0x95, 0xf2,
	0x30, 0xe1, 0xa1, 0xb8, 0x72, 0x56, 0x94, 0x5d, 0x86, 0x26, 0x77, 0xa0, 0xef, 0x27, 0xe3, 0x34,
	0x62, 0xe8, 0xcf, 0xaa, 0x5c, 0xcc, 0x19, 0x68, 0x35, 0x3b, 0x3d, 0x4d, 0xb8, 0x70, 0xd6, 0x94,
	0xd5, 0x8a, 0x72, 0xff, 0xda, 0x50, 0xd8, 0x3e, 0x44, 0x23, 0x0e, 0xa5, 0x27, 0xcf, 0x68, 0x5a,
	0x8f, 0xaa, 0x1f, 0x95, 0x50, 0xf5, 0xdd, 0x19, 0x89, 0xaf, 0xd8, 0x71, 0x67, 0x8f, 0x0a, 0xba,
	0x1f, 0x0b, 0x7e, 0x35, 0x1b, 0x68, 0x1b, 0x0f, 0xa0, 0x6f, 0xc5, 0xc8, 0x0d, 0x68, 0x5d, 0xb0,
	0x2b, 0x0d, 0x13, 0x7c, 0xc4, 0x30, 0xbf, 0xa4, 0xd1, 0xc4, 0x00, 0x45, 0x11, 0x8f, 0x9a, 0x0f,
	0x1b, 0xee, 0xcf, 0xe1, 0xce, 0xf4, 0xb9, 0xfb, 0xe3, 0x54, 0x5c, 0xd5, 0xbb, 0x43, 0x0a, 0xee,
	0xf4, 0x6b, 0x6e, 0x80, 0x50, 0x37, 0x40, 0xee, 0x5f, 0xbf, 0xe3, 0xf7, 0x4a, 0x01, 0x72, 0xeb,
	0x02, 0x34, 0xf7, 0xde, 0xed, 0xc3, 0xda, 0x35, 0x61, 0xb2, 0x0b, 0x1d, 0x49, 0xea, 0x9b, 0x77,
	0xa7, 0x6e, 0x7f, 0x4f, 0x89, 0xba, 0xff, 0x6c, 0x42, 0xdf, 0x32, 0xff, 0x5f, 0x2f, 0xdf, 0xff,
	0xe4, 0x86, 0xfd, 0x0a, 0x08, 0x06, 0x7e, 0x68, 0x0e, 0xa9, 0x87, 0xce, 0xa3, 0x12, 0x74, 0xde,
	0x9f, 0x91, 0x5a, 0xbb, 0xd9, 0x5c, 0xf8, 0x1c, 0xc3, 0x3b, 0x15, 0x0a, 0xd8, 0xb6, 0x2c, 0x6b,
	0x4e, 0xdb, 0xca, 0x0d, 0xcf, 0x55, 0xdc, 0x3f, 0x36, 0x55, 0x0b, 0xb2, 0x9c, 0x85, 0x20, 0x75,
	0x1d, 0x30, 0xad, 0x69, 0xc0, 0xdc, 0x81, 0x7e, 0x26, 0x28, 0x17, 0x01, 0x15, 0x4c, 0x03, 0x2a,
	0x67, 0x20, 0x68, 0x58, 0x1c, 0xc8, 0x35, 0x0d, 0x27, 0x4d, 0x16, 0xe2, 0xd9, 0x2d, 0x01, 0xe3,
	0x1a, 0x8a, 0x97, 0xa6, 0x51, 0x5c, 0x80, 0x68, 0x6f, 0x26, 0x44, 0xfb, 0xb3, 0x21, 0x0a, 0x65,
	0x88, 0xba, 0xaf, 0x9b, 0x66, 0x30, 0xc2, 0x3e, 0xa7, 0x07, 0xa3, 0xaf, 0x01, 0xf8, 0xf2, 0xe9,
	0xe8, 0x2a, 0x65, 0x8e, 0x2f, 0x55, 0x0a, 0x1c, 0x34, 0x5f, 0x60, 0x38, 0xf7, 0x74, 0x04, 0x35,
	0x25, 0x07, 0x2a, 0xb9, 0xd7, 0x70, 0xcf, 0x0c, 0x4d, 0x86, 0x26, 0x1f, 0x00, 0x89, 0x68, 0x26,
	0x46, 0xe6, 0xe4, 0x91, 0x08, 0xc7, 0x4c, 0xc7, 0xf4, 0x06, 0xae, 0x3c, 0xd3, 0x0b, 0x47, 0xe1,
	0x98, 0x91, 0x8f, 0x01, 0x94, 0x26, 0x16, 0x57, 0x19, 0xd9, 0xc1, 0xee, 0xdd, 0x8a, 0x94, 0x2b,
	0xd3, 0x0f, 0xe8, 0x19, 0xf3, 0x0a, 0x0a, 0xe4, 0x01, 0xf4, 0xd0, 0x24, 0xa9, 0xdc, 0x99, 0xdf,
	0xf0, 0xad, 0xb0, 0xfb, 0xbb, 0x26, 0xdc, 0x54, 0x7b, 0xca, 0xd2, 0xb3, 0x60, 0x3c, 0x1c, 0xd0,
	0x6d, 0xd1, 0x04, 0xc4, 0x90, 0x6f, 0x4f, 0x44, 0x1e, 0x4e, 0x45, 0xa4, 0xbe, 0x10, 0xe7, 0x21,
	0xf9, 0x75, 0x03, 0x36, 0x9e, 0xdb, 0x8d, 0x9e, 0xd0, 0x8c, 0xbd, 0x98, 0x30, 0xec, 0x29, 0xbf,
	0x9c, 0xb0, 0x4c, 0xe0, 0x2d, 0x91, 0x88, 0x1f, 0xf9, 0x13, 0x9e, 0x25, 0x5c, 0x07, 0x60, 0x20,
	0x79, 0x4f, 0x25, 0x8b, 0xfc, 0x10, 0x3a, 0x59, 0xc2, 0x45, 0x56, 0x33, 0xe5, 0x56, 0x1c, 0x70,
	0x98, 0x70, 0xe1, 0x29, 0x45, 0xf7, 0x10, 0x6e, 0xcf, 0x90, 0x50, 0x25, 0x30, 0x49, 0x19, 0x17,
	0xa6, 0xf1, 0x5a, 0x1a, 0xaf, 0x67, 0x10, 0x72, 0xe6, 0xcb, 0xcb, 0xa4, 0xc2, 0x9f, 0x33, 0xdc,
	0xd7, 0x0d, 0x70, 0x2a, 0x1d, 0xd3, 0x15, 0x2f, 0x39, 0xf9, 0x05, 0xf3, 0x85, 0x81, 0xb8, 0xa2,
	0xc8, 0x03, 0x58, 0xe2, 0x2c, 0x9b, 0x44, 0xd6, 0x9b, 0x39, 0x39, 0x30, 0xd2, 0xe4, 0x3d, 0x18,
	0xc4, 0xec, 0xd2, 0x86, 0x49, 0xa5, 0x19, 0x90, 0xa5, 0xa2, 0xe4, 0xfe, 0xa3, 0x09, 0x90, 0x2b,
	0xce, 0x34, 0x40, 0x55, 0xae, 0xa6, 0xad, 0x5c, 0x5b, 0xb0, 0xac, 0xef, 0x79, 0x11, 0x3f, 0x03,
	0xcd, 0x93, 0xd0, 0xd9, 0x06, 0x09, 0xa7, 0x11, 0x0b, 0x42, 0x2b, 0xa6, 0x8a, 0xd5, 0x2a, 0xf2,
	0xf7, 0x25, 0x5b, 0x4a, 0x6e, 0x40, 0x8f, 0x72, 0xff, 0x3c, 0x7c, 0xc9, 0x02, 0x89, 0x92, 0x9e,
	0x67, 0x69, 0x1c, 0x6e, 0x26, 0x3c, 0xd2, 0x05, 0x0b, 0x1f, 0xc9, 0x33, 0x00, 0x1d, 0xea, 0x90,
	0x65, 0xce, 0x92, 0x0c, 0xc7, 0xb7, 0x6b, 0xc3, 0xb1, 0x73, 0x60, 0xe5, 0xd5, 0x60, 0x55, 0xd8,
	0x60, 0xe3, 0x4b, 0x58, 0xbb, 0xb6, 0x5c, 0x31, 0x50, 0x3d, 0x28, 0x0e, 0x54, 0xd5, 0x2f, 0x09,
	0xfa, 0x38, 0x0d, 0x82, 0xe2, 0xcc, 0xf5, 0xb7, 0x16, 0xac, 0x96, 0x57, 0xab, 0x1a, 0x81, 0xc0,
	0x4b, 0xae, 0x1b, 0x01, 0x3e, 0x93, 0x27, 0xd0, 0xe7, 0xa1, 0x7f, 0x3e, 0x12, 0xec, 0x52, 0x38,
	0x20, 0xdd, 0xbc, 0x37, 0xf3, 0x5c, 0x2c, 0x08, 0x5e, 0xe8, 0x9f, 0x1f, 0xb1, 0x4b, 0xe1, 0xf5,
	0xb8, 0x7e, 0xaa, 0xcc, 0xc1, 0xa0, 0x32, 0x07, 0xd7, 0x13, 0xba, 0x3c, 0x9d, 0xd0, 0xcf, 0x60,
	0x79, 0x3c, 0x89, 0x44, 0x38, 0xca, 0x58, 0x84, 0x08, 0x59, 0x91, 0x36, 0x7d, 0xbd, 0xd6, 0xa6,
	0x43, 0x29, 0xea, 0x0d, 0xa4, 0xa2, 0x22, 0xc8, 0x43, 0xe8, 0x88, 0x50, 0x44, 0xcc, 0x59, 0x9d,
	0x39, 0xfa, 0xe5, 0x1b, 0x1c, 0xa1, 0xa4, 0xa7, 0x14, 0xc8, 0x63, 0xe8, 0xea, 0xb3, 0xd7, 0x64,
	0x1e, 0x16, 0x3a, 0x5b, 0xab, 0x20, 0xb4, 0xe3, 0xc9, 0xf8, 0x84, 0x71, 0xe7, 0xc6, 0x66, 0x63,
	0xbb, 0xe5, 0x69, 0x4a, 0xbf, 0xff, 0x31, 0xe7, 0xe6, 0x9c, 0xd4, 0xe2, 0x96, 0x7b, 0x54, 0x30,
	0x39, 0x48, 0x30, 0xf7, 0xa1, 0x49, 0xaa, 0xe1, 0xe3, 0x7c, 0x25, 0xeb, 0x8f, 0xce, 0xab, 0x22,
	0x10, 0x4c, 0x2c, 0x36, 0x57, 0x07, 0x1f, 0xdd, 0x17, 0xf0, 0x6e, 0xae, 0xf9, 0xac, 0x10, 0x98,
	0x45, 0xc6, 0x83, 0x75, 0xe8, 0xf8, 0x49, 0x64, 0xaf, 0xb2, 0x22, 0xdc, 0x9f, 0xd8, 0x76, 0x6a,
	0xfd, 0xfe, 0x0f, 0x76, 0xfb, 0x43, 0x03, 0xd6, 0xae, 0x65, 0xc0, 0x22, 0xb4, 0x51, 0x40, 0xe8,
	0x5d, 0x80, 0x34, 0xa2, 0x61, 0xac, 0x20, 0xaa, 0x2b, 0x9d, 0xe4, 0x48, 0xf0, 0x11, 0x68, 0x9f,
	0x73, 0x76, 0x6a, 0x46, 0x2d, 0x7c, 0x26, 0x1f, 0x43, 0x5b, 0x0a, 0xab, 0x4e, 0xf2, 0xcd, 0xfa,
	0xd4, 0xb3, 0x4b, 0x31, 0x8c, 0x05, 0xe3, 0x31, 0x8d, 0x3c, 0xa9, 0xe6, 0x7e, 0x06, 0xb7, 0xaa,
	0xd7, 0xe5, 0x1c, 0x92, 0xc4, 0x82, 0xc5, 0x26, 0xfc, 0x86, 0x44, 0x33, 0xa2, 0x30, 0xbe, 0x30,
	0x7e, 0xe3, 0xb3, 0xfb, 0xe7, 0x46, 0x31, 0x7b, 0xc7, 0x19, 0xe3, 0x0b, 0x57, 0x3e, 0x13, 0x88,
	0x56, 0x21, 0x10, 0x26, 0xb4, 0xed, 0x42, 0x68, 0xef, 0x02, 0xd0, 0x97, 0x54, 0x50, 0x3e, 0xc2,
	0xfa, 0xa5, 0x26, 0xb1, 0xbe, 0xe2, 0x1c, 0xf3, 0x88, 0xfc, 0x00, 0xba, 0x29, 0xe3, 0x59, 0x12,
	0xcb, 0xd2, 0x36, 0xd8, 0xfd, 0x46, 0x6d, 0x28, 0xd0, 0xc2, 0x03, 0x29, 0xee, 0x69, 0x35, 0xf7,
	0x03, 0x58, 0xaf, 0x5a, 0xc7, 0x94, 0xb2, 0x31, 0x0d, 0x23, 0x83, 0x42, 0x49, 0xb8, 0x7f, 0x6a,
	0x00, 0x99, 0xae, 0x14, 0x6f, 0x49, 0x56, 0x5f, 0xc0, 0x72, 0xf1, 0x7b, 0x1a, 0xf9, 0x14, 0x56,
	0x26, 0xc5, 0xcf, 0x48, 0x73, 0xbe, 0x9e, 0xc8, 0xef, 0x79, 0x65, 0x0d, 0xf7, 0xc7, 0xea, 0x2b,
	0x8a, 0xcc, 0x2c, 0x81, 0x36, 0x2e, 0x1a, 0x27, 0x27, 0x9a, 0x37, 0x75, 0x19, 0x6e, 0xc3, 0x12,
	0x4f, 0x22, 0x3d, 0x74, 0xe3, 0x6b, 0x6e, 0x17, 0xc9, 0x61, 0x80, 0x83, 0xfc, 0xed, 0xbc, 0x9b,
	0x3c, 0x95, 0x25, 0xd1, 0x0c, 0x22, 0x8f, 0xa1, 0x9b, 0x52, 0x6e, 0x60, 0x57, 0x57, 0x92, 0x50,
	0xf7, 0x40, 0x8a, 0x7a, 0x5a, 0x85, 0x7c, 0x51, 0x6a, 0x65, 0xaa, 0xb3, 0x3f, 0xaa, 0xdd, 0xa0,
	0x74, 0x78, 0x6d, 0x5f, 0x0b, 0x16, 0xe9, 0x6b, 0x8f, 0xcb, 0x7d, 0xed, 0x5e, 0xbd, 0xf1, 0x15,
	0xbd, 0xed, 0xef, 0x8d, 0x62, 0x68, 0x8e, 0xd3, 0xa0, 0x10, 0x9a, 0xb2, 0x77, 0x8d, 0x05, 0xbc,
	0x2b, 0xe9, 0xbf, 0x05, 0xde, 0xdd, 0x37, 0x65, 0x35, 0xcf, 0x1d, 0x4e, 0x54, 0xf8, 0x22, 0x79,
	0x42, 0x33, 0x89, 0x14, 0x75, 0x1c, 0x18, 0xd6, 0x30, 0x70, 0xff, 0xd2, 0x32, 0x57, 0xad, 0xb8,
	0x6d, 0xa1, 0x77, 0x35, 0xde, 0xbc, 0x77, 0xd9, 0x96, 0xd9, 0x7c, 0xd3, 0x96, 0x69, 0xba, 0x5b,
	0xeb, 0x8d, 0xba, 0x5b, 0x79, 0xf8, 0x68, 0xff, 0xf7, 0x86, 0x8f, 0xce, 0x42, 0xc3, 0x47, 0x77,
	0xfe, 0xf0, 0xb1, 0xf4, 0x6f, 0x0e, 0x1f, 0xf9, 0x14, 0xd0, 0x2b, 0x4d, 0x01, 0x7a, 0xce, 0xec,
	0xdb, 0x39, 0xd3, 0xdd, 0x37, 0x6d, 0x5a, 0xe3, 0x71, 0x9f, 0xeb, 0xbf, 0x06, 0x04, 0xda, 0x7e,
	0x12, 0xd8, 0xa2, 0x89, 0xcf, 0xd8, 0x7e, 0xc6, 0x2c, 0xcb, 0xe8, 0x99, 0x29, 0x29, 0x86, 0x74,
	0xb9, 0x79, 0x8f, 0xd9, 0xbf, 0xd4, 0xef, 0x6e, 0xc9, 0x05, 0x33, 0x7b, 0x62, 0xb1, 0x3d, 0xe3,
	0x34, 0x16, 0xa3, 0x42, 0x19, 0xee, 0x4b, 0xce, 0x91, 0x6e, 0x2c, 0xf2, 0xa8, 0x66, 0xe1, 0xa8,
	0x2d, 0x58, 0xe6, 0x4c, 0xbd, 0x4f, 0x8c, 0x26, 0x3c, 0x34, 0xa3, 0xb7, 0xe1, 0x1d, 0xf3, 0xd0,
	0xfd, 0x4d, 0xd3, 0xbc, 0x63, 0x5c, 0x3b, 0x14, 0xcd, 0xdf, 0x82, 0x65, 0xea, 0xfb, 0x2c, 0xcb,
	0x46, 0x02, 0x99, 0xe6, 0xd5, 0x49, 0xf1, 0xa4, 0xdc, 0xd4, 0x37, 0x88, 0xe6, 0xf4, 0x37, 0x88,
	0x7b, 0xb0, 0x9a, 0x8b, 0xc8, 0x52, 0xaa, 0xec, 0x58, 0xb1, 0x5c, 0xf9, 0xd3, 0xa2, 0x24, 0x16,
	0xfa, 0x49, 0xac, 0x7b, 0x64, 0x2e, 0x36, 0xf4, 0x93, 0x98, 0xbc, 0x0b, 0xdd, 0x93, 0x44, 0xe0,
	0x51, 0x0a, 0x20, 0x9d, 0x93, 0x44, 0x0c, 0x03, 0xf2, 0x7d, 0xf3, 0xc5, 0x4a, 0xf5, 0xc8, 0xf7,
	0x67, 0x66, 0xdb, 0xb8, 0xf9, 0x53, 0x94, 0xd6, 0x5f, 0xb6, 0xdc, 0x2f, 0xe1, 0x9d, 0x8a, 0xd5,
	0xca, 0x9e, 0xf7, 0x91, 0x6e, 0x11, 0xcd, 0x05, 0x6e, 0x89, 0x6c, 0x37, 0x52, 0xdc, 0xdd, 0x31,
	0xe3, 0x88, 0x39, 0xc1, 0x62, 0x04, 0xbb, 0x30, 0xe7, 0xf6, 0xc5, 0x54, 0x11, 0x6e, 0x08, 0xbd,
	0xcf, 0x2f, 0x51, 0xe3, 0xf4, 0x4a, 0x22, 0x26, 0x3b, 0x2b, 0x58, 0x62, 0x48, 0xf2, 0x14, 0x7a,
	0x63, 0xca, 0x2f, 0x82, 0xe4, 0x55, 0xac, 0x0d, 0xaa, 0x1a, 0x0e, 0xcc, 0x46, 0x72, 0x88, 0xd4,
	0xe2, 0x9e, 0x55, 0x74, 0xbf, 0x03, 0xeb, 0x55, 0x12, 0xb3, 0xe7, 0xa4, 0x27, 0xb7, 0xbe, 0x58,
	0xdf, 0xf9, 0xf0, 0xf1, 0xd4, 0x41, 0x27, 0x5d, 0xf9, 0x3f, 0xed, 0xfe, 0xbf, 0x02, 0x00, 0x00,
	0xff, 0xff, 0xae, 0x5a, 0xc9, 0x40, 0x67, 0x1b, 0x00, 0x00,
}
